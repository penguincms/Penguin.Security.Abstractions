<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Security.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Penguin.Security.Abstractions.Attributes.RequiresRoleAttribute">
            <summary>
            Used to denote that a Controller Action should require the session user to have any role matching the provided in order to access it
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Attributes.RequiresRoleAttribute.AllowedRoles">
            <summary>
            The roles allowed by this attribute
            </summary>
        </member>
        <member name="M:Penguin.Security.Abstractions.Attributes.RequiresRoleAttribute.#ctor(System.String[])">
            <summary>
            Mark the Controller Action as only being accessible to users with any of the provided roles
            </summary>
            <param name="roleNames"></param>
        </member>
        <member name="T:Penguin.Security.Abstractions.Constants.RoleNames">
            <summary>
            Constant strings for role names
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.AdminAccess">
            <summary>
            This role allows a user or group to access the administration panel
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.AllUsers">
            <summary>
            This role is the base for all site users
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.Guest">
            <summary>
            This role represents users that are not logged in
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.LoggedIn">
            <summary>
            This role represents users that are logged in
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.SysAdmin">
            <summary>
            This role is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="F:Penguin.Security.Abstractions.Constants.RoleNames.UserManager">
            <summary>
            This role allows access to functions that control other users
            </summary>
        </member>
        <member name="T:Penguin.Security.Abstractions.Exceptions.MissingRoleException">
            <summary>
            Thrown when a user attempts to access a resource that they do not have permissions to access
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Exceptions.MissingRoleException.MissingRoles">
            <summary>
            The roles that are missing
            </summary>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.MissingRoleException.#ctor(System.String,System.String[])">
            <summary>
            Constructs a new instance with the given message
            </summary>
            <param name="message">The message</param>
            <param name="missingRoles">The missing roles</param>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.MissingRoleException.#ctor(System.String,System.Exception,System.String[])">
            <summary>
            Constructs an instance with the given message and inner exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">An exception that lead to the inability to check the roles</param>
            <param name="missingRoles">The roles that are missing</param>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.MissingRoleException.#ctor(System.String[])">
            <summary>
            Constructs a new instance with the specified roles
            </summary>
            <param name="missingRoles">The roles that are missing</param>
        </member>
        <member name="T:Penguin.Security.Abstractions.Exceptions.NotLoggedInException">
            <summary>
            Thrown when a user attempts to access a resource that requires being logged in, and they are not
            </summary>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.NotLoggedInException.#ctor">
            <summary>
            Constructs an empty instance of this exception
            </summary>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.NotLoggedInException.#ctor(System.String)">
            <summary>
            Constructs a new instance with the given message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Penguin.Security.Abstractions.Exceptions.NotLoggedInException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance with the given message and inner exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IPermissionableEntityExtensions.AllowsAccessType``4(Penguin.Security.Abstractions.Interfaces.IPermissionableEntity{``0,``1},Penguin.Security.Abstractions.Interfaces.IUser{``2,``3},Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Checks to see if the user specified is allowed to access this object in a given way, based on its groups/roles
            </summary>
            <param name="user">The user to check for access</param>
            <param name="type">The type of access to check for</param>
            <returns>Whether or not the given user is allowed the requested access type</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.SecurityGroupGuids``2(Penguin.Security.Abstractions.Interfaces.IUser{``0,``1})">
            <summary>
            Returns a list of Guids representing the user themselves, all groups, and all roles (inc recursive)
            </summary>
            <param name="target">The user to check</param>
            <returns>A list of Guids representing the user themselves, all groups, and all roles (inc recursive)</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.SecurityGroups``2(Penguin.Security.Abstractions.Interfaces.IUser{``0,``1})">
            <summary>
            Gets a list of security groups for the user containing themselves, all groups, and all roles (inc recursive)
            </summary>
            <param name="target">The user to retrieve the security groups for</param>
            <returns>A list of security groups for the user containing themselves, all groups, and all roles (inc recursive)</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.SecurityGroups``2(Penguin.Security.Abstractions.Interfaces.IHasGroupsAndRoles{``0,``1})">
            <summary>
            Gets a list of security group guids for the target containing all groups, and all roles (inc recursive)
            </summary>
            <param name="target">The user to retrieve the security groups for</param>
            <returns>A list of security group guids for the user containing all groups, and all roles (inc recursive)</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.SecurityGroups``2(Penguin.Security.Abstractions.Interfaces.IHasGroups{``0})">
            <summary>
            Returns a list of Guids representing ONLY the groups (not roles) that an object belongs to
            </summary>
            <param name="target">The target to check</param>
            <returns>A list of Guids representing ONLY the groups (not roles) that an object belongs to</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.SecurityGroups``1(Penguin.Security.Abstractions.Interfaces.IHasRoles{``0})">
            <summary>
            Returns a list of Guids representing ONLY the roles (not groups) that an object belongs to
            </summary>
            <param name="target">The target to check</param>
            <returns>A list of Guids representing ONLY the roles (not groups) that an object belongs to</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.GetGroupGuids``1(Penguin.Security.Abstractions.Interfaces.IHasGroups{``0})">
            <summary>
            Returns a list of Guids representing groups AND roles that an object belongs to
            </summary>
            <param name="target">The target to check</param>
            <returns>A list of Guids representing groups AND roles that an object belongs to</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupExtensions.GetGroups``1(Penguin.Security.Abstractions.Interfaces.IHasGroups{``0})">
            <summary>
            Returns a list of security groups including groups AND roles that an object belongs to
            </summary>
            <param name="target">The target to check</param>
            <returns>A list of Guids representing groups AND roles that an object belongs to</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.ISecurityGroupPermissionExtensions.HasPermission``2(Penguin.Security.Abstractions.Interfaces.ISecurityGroupPermission{``1},Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Checks this permission using flags, to determine if this allows for a particular kind of access
            </summary>
            <param name="type">The access type to check for</param>
            <returns>True if the access should be granted</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.AllRoles``2(Penguin.Security.Abstractions.Interfaces.IHasGroupsAndRoles{``0,``1})">
            <summary>
            Returns all roles from associated groups as well as directly assigned
            </summary>
            <param name="target">The object to retrieve roles for</param>
            <returns>An IEnumerable of distinct roles</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasGroup``1(Penguin.Security.Abstractions.Interfaces.IHasGroups{``0},``0)">
            <summary>
            Checks the target group list to see if a group exists
            </summary>
            <param name="target">The target to check</param>
            <param name="thisGroup">The group to check for</param>
            <returns>If the target has the group in its group list</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasGroup``1(Penguin.Security.Abstractions.Interfaces.IHasGroups{``0},System.String)">
            <summary>
            Checks the target group list to see if a group exists
            </summary>
            <param name="target">The target to check</param>
            <param name="groupName">The group name to check for</param>
            <returns>If the target has the group in its group list</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasRole``2(Penguin.Security.Abstractions.Interfaces.IHasGroupsAndRoles{``0,``1},``1)">
            <summary>
            Checks the target role list and roles associated with groups to see if a role exists
            </summary>
            <param name="target">The target to check</param>
            <param name="thisRole">The role to check for</param>
            <returns>If the target has the role in its role list</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasRole``1(Penguin.Security.Abstractions.Interfaces.IHasRoles{``0},``0)">
            <summary>
            Checks the target role list to see if a role exists
            </summary>
            <param name="target">The target to check</param>
            <param name="thisRole">The role to check for</param>
            <returns>If the target has the role in its role list</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasRole``2(Penguin.Security.Abstractions.Interfaces.IHasGroupsAndRoles{``0,``1},System.String)">
            <summary>
            Checks the target role list and roles associated with groups to see if a role exists
            </summary>
            <param name="target">The target to check</param>
            <param name="roleName">The name of the role to check for</param>
            <returns>If the target has the role</returns>
        </member>
        <member name="M:Penguin.Security.Abstractions.Extensions.IUserExtensions.HasRole``1(Penguin.Security.Abstractions.Interfaces.IHasRoles{``0},System.String)">
            <summary>
            Checks the target role list to see if a role exists
            </summary>
            <param name="target">The target to check</param>
            <param name="roleName">The name of the role to check for</param>
            <returns>If the target has the role in its role list</returns>
        </member>
        <member name="T:Penguin.Security.Abstractions.Interfaces.IHasGroups`1">
            <summary>
            An interface denoting that an object can be assigned to groups
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Interfaces.IHasGroups`1.Groups">
            <summary>
            A list of groups that the object belongs to
            </summary>
        </member>
        <member name="T:Penguin.Security.Abstractions.Interfaces.IHasGroupsAndRoles`2">
            <summary>
            Used for objects that contain a list of groups, as well as roles
            </summary>
        </member>
        <member name="T:Penguin.Security.Abstractions.Interfaces.IHasRoles`1">
            <summary>
            An interface denoting that the object can be directly assigned roles as permissions
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Interfaces.IHasRoles`1.Roles">
            <summary>
            A list of roles that the object belongs to
            </summary>
        </member>
        <member name="T:Penguin.Security.Abstractions.Interfaces.IUserSession`1">
            <summary>
            An interface representing an active user session
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Interfaces.IUserSession`1.IsLocalConnection">
            <summary>
            True if the connection is coming from LocalHost
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Interfaces.IUserSession`1.IsLoggedIn">
            <summary>
            There is an active user session
            </summary>
        </member>
        <member name="P:Penguin.Security.Abstractions.Interfaces.IUserSession`1.LoggedInUser">
            <summary>
            The current logged in user
            </summary>
        </member>
        <member name="T:Penguin.Security.Abstractions.PermissionTypes">
            <summary>
            Defines the type of access that a security group has to a permissionable entity
            </summary>
        </member>
    </members>
</doc>
